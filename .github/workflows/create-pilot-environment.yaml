name: Pilot Environment Creator

on:
  workflow_dispatch:
    inputs:
      port_payload:
        description: 'Port payload from self-service action run.'
        required: true

jobs:
  create-pilot-env:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Step 2: Parse JSON input and mask clientId and clientSecret
      - name: Parse JSON input and mask sensitive data
        id: parse_json
        run: |
          PROSPECT_NAME=$(echo '${{ github.event.inputs.port_payload }}' | jq -r .prospect_name)
          CLOUD_PROVIDER=$(echo '${{ github.event.inputs.port_payload }}' | jq -r .cloud_provider)
          CLIENT_ID=$(echo '${{ github.event.inputs.port_payload }}' | jq -r .client_id)
          CLIENT_SECRET=$(echo '${{ github.event.inputs.port_payload }}' | jq -r .client_secret)
          URL=$(echo '${{ github.event.inputs.port_payload }}' | jq -r .url)
          GIT_PROVIDER=$(echo '${{ github.events.inputs.port_payload }}' | jq -r .git_provider)
          PORT_REGION=$(echo '${{ github.events.inputs.port_payload }}' | jq -r .port_region)
          USER_STORY_1=$(echo '${{ github.events.inputs.port_payload }}' | jq -r .user_story_1)
          USER_STORY_2=$(echo '${{ github.events.inputs.port_payload }}' | jq -r .user_story_2)
          USER_STORY_3=$(echo '${{ github.events.inputs.port_payload }}' | jq -r .user_story_3)

          # Mask the sensitive data in the logs
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"

          # Sanitize CUSTOMER_NAME for branch naming
          SANITIZED_CUSTOMER_NAME=$(echo "$PROSPECT_NAME" | tr '[:upper:]' '[:lower:]' | tr -cs '[:alnum:]' '-' | sed 's/^-//;s/-$//')

          echo "Sanitized Customer Name (Branch): $SANITIZED_CUSTOMER_NAME"
          echo "Cloud Provider: $CLOUD_PROVIDER"
          echo "SANITIZED_CUSTOMER_NAME=$SANITIZED_CUSTOMER_NAME" >> $GITHUB_ENV
          echo "PROSPECT_NAME=$PROSPECT_NAME" >> $GITHUB_ENV
          echo "CLOUD_PROVIDER=$CLOUD_PROVIDER" >> $GITHUB_ENV
          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "URL=$URL" >> $GITHUB_ENV
          echo "GIT_PROVIDER=$GIT_PROVIDER" >> $GITHUB_ENV
          echo "PORT_REGION=$PORT_REGION" >> $GITHUB_ENV
          echo "USER_STORY_1=$USER_STORY_1" >> $GITHUB_ENV
          echo "USER_STORY_2=$USER_STORY_2" >> $GITHUB_ENV
          echo "USER_STORY_3=$USER_STORY_3" >> $GITHUB_ENV

        shell: bash

      # Step 3: Checkout the 'pilot-env-creator' repository
      - name: Checkout pilot-env-creator repository
        uses: actions/checkout@v2
        with:
          repository: aidan-port/pilot-env-creator  # Replace 'your-org' with the actual organization name
          token: ${{ secrets.ORG_ADMIN_TOKEN }}

      # Step 4: Create a new branch in the 'pilot-env-creator' repo using sanitized customer_name
      - name: Create a new branch
        run: |
          git checkout -b "$SANITIZED_CUSTOMER_NAME"
          git push origin "$SANITIZED_CUSTOMER_NAME"

      # Step 5: Copy main.tf, variables.tf, and terraform.tfvars from the main branch
      - name: Copy Terraform files from main
        run: |
          git checkout origin/main -- main.tf variables.tf terraform.tfvars

      # Step 6: Update terraform.tfvars with cloudProvider
      - name: Update terraform.tfvars
        run: |
          # Remove duplicate variables from terraform.tfvars before appending
          sed -i '/^cloudProvider/d' terraform.tfvars
          sed -i '/^gitProvider/d' terraform.tfvars
          sed -i '/^portUrl/d' terraform.tfvars
          sed -i '/^prospect_name/d' terraform.tfvars
          sed -i '/^user_story_1/d' terraform.tfvars
          sed -i '/^user_story_2/d' terraform.tfvars
          sed -i '/^user_story_3/d' terraform.tfvars
          sed -i '/^url/d' terraform.tfvars
      
          echo "cloudProvider = \"$CLOUD_PROVIDER\"" >> terraform.tfvars
          echo "gitProvider = \"$GIT_PROVIDER\"" >> terraform.tfvars
          echo "portUrl = \"$URL\"" >> terraform.tfvars
          echo "prospect_name = \"$PROSPECT_NAME\"" >> terraform.tfvars
          echo "user_story_1 = \"$USER_STORY_1\"" >> terraform.tfvars
          echo "user_story_2 = \"$USER_STORY_2\"" >> terraform.tfvars
          echo "user_story_3 = \"$USER_STORY_3\"" >> terraform.tfvars
          echo "url = \"$URL\"" >> terraform.tfvars
      
      # Step 7: Set environment variable for PORT_BETA_FEATURES_ENABLED
      - name: Set PORT_BETA_FEATURES_ENABLED to true
        run: |
          echo "PORT_BETA_FEATURES_ENABLED=false" >> $GITHUB_ENV
          echo "TF_VAR_client_id=$CLIENT_ID" >> $GITHUB_ENV
          echo "TF_VAR_client_secret=$CLIENT_SECRET" >> $GITHUB_ENV

      # Step 8: Initialize Terraform
      - name: Terraform Init
        run: terraform init
        
      # Step 9: Terraform Import port_page.home_page
      - name: Terraform Import
        run: terraform import port_page.home_page "$home" -var="clientId=$CLIENT_ID" -var="clientSecret=$CLIENT_SECRET
      
      # Step 10: Extract home_page_identifier using jq
      - name: Extract home_page_identifier
        id: get_home_page_id
        run: |
          HOME_PAGE_IDENTIFIER=$(terraform show -json | jq '.resources[].instances[].attributes.widgets[] | fromjson | .id')
          echo "home_page_identifier = \"$HOME_PAGE_IDENTIFIER\"" >> terraform.tfvars
        shell: bash

      # Step 11: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=planfile.tfplan

      # Step 12: Terraform Apply (auto-approve)
      - name: Terraform Apply
        run: terraform apply "planfile.tfplan" -auto-approve

      # Step 13: Cleanup (unset clientId and clientSecret)
      - name: Unset sensitive environment variables
        run: |
          unset TF_VAR_client_id
          unset TF_VAR_client_secret
